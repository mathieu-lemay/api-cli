# References:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
# https://github.com/casey/just/blob/master/.github/workflows/release.yaml

name: Release

on:
  push:
    tags:
      - "v[0-9]+.*"

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-version:
    name: Validate version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure package version is same as tag
        run: |
          package_version=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "api-cli") | .version')
          if [ "refs/tags/v${package_version}" != "${{ github.ref }}" ]; then
            echo "Package version is not the same as tag: ${package_version} != ${{ github.ref }}"
            exit 1
          fi

  build-release:
    name: build-release
    needs: ["validate-version"]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            target_features: ""
            target_rustflags: ""
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            target_features: "native-tls-vendored"
            target_rustflags: "--codegen linker=aarch64-linux-gnu-gcc"
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            target_features: "native-tls-vendored"
            target_rustflags: "--codegen linker=arm-linux-gnueabihf-gcc"
          - target: x86_64-apple-darwin
            os: macos-latest
            target_features: "native-tls-vendored"
            target_rustflags: ""
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            target_features: ""
            target_rustflags: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install latest Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install OpenSSL
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install pkg-config libssl-dev

      - name: Install AArch64 Toolchain
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu

      - name: Install ARM7 Toolchain
        if: ${{ matrix.target == 'armv7-unknown-linux-gnueabihf' }}
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf

      - name: Build binary
        run: RUSTFLAGS="${RUSTFLAGS} ${{ matrix.target_rustflags }}" cargo build --verbose --release --features=${{ matrix.target_features }} --target=${{ matrix.target }}

      - name: Create package
        id: package
        run: |
          package="api-cli-${{ matrix.target }}.tar.gz"
          tar zcf "$package" -C "target/${{ matrix.target }}/release" api-cli
          echo "package=$package" >> $GITHUB_OUTPUT

      - name: Publish package
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          files: ${{ steps.package.outputs.package }}
